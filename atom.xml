<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ceeram]]></title>
  <link href="http://ceeram.github.com/atom.xml" rel="self"/>
  <link href="http://ceeram.github.com/"/>
  <updated>2013-06-28T14:24:41+02:00</updated>
  <id>http://ceeram.github.com/</id>
  <author>
    <name><![CDATA[Ceeram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Opauth 1.0-alpha arriving soon]]></title>
    <link href="http://ceeram.github.com/blog/2013/06/22/opauth-1-dot-0-alpha-arriving-soon/"/>
    <updated>2013-06-22T12:59:00+02:00</updated>
    <id>http://ceeram.github.com/blog/2013/06/22/opauth-1-dot-0-alpha-arriving-soon</id>
    <content type="html"><![CDATA[<p>Lately i have been hacking on <a href="http://opauth.org">Opauth</a> as i blogged about
earlier already. Most things are now in place for what will be released as
Opauth version 1.0. Currently its still a work in progress, but if you like, you
can already play with it and provide some feedback before we freeze the api.</p>

<h3>Changes</h3>

<p>Here a quick overview of things that have changed since 0.x versions:</p>

<h4>Opauth no longer makes an additional request to your application</h4>

<p>In the past, Opauth used <code>callback_transport</code> config and <code>shipToCallback()</code>
method to pass the authentication data to your application. This has all been
removed as you will now receive a <code>Response</code> object directly from <code>Opauth-&gt;run()</code>
This also requires less to none framework specific code around Opauth.</p>

<h4>Http requests are now handled by individual transport classes</h4>

<p>We still support non-curl users with the included File transport class, which
uses the <code>file_get_contents()</code> method. Also there is a built in Curl transport
class which is the default transport. Additionally you can add your own
transport classes to make the requests with tools like Guzzle.</p>

<h4>No more PHP 5.2 support</h4>

<p>We have dropped support for this very outdated PHP version. The minimum required
version is now PHP 5.3. The code has been refactored into several classes and
namespaces have been added.</p>

<h4>Map response data</h4>

<p>Response mapping was add, so you can add your own mapping in each strategy
config array to map raw data to the response object in your preferred structure</p>

<h4>What&rsquo;s left?</h4>

<p>In order to push to alpha state, we need to update all documentation and help
3rd party strategy maintainers to upgrade to 1.0 version.</p>

<p>We have moved the github repo away from uzyn&rsquo;s github account into the <a href="https://github.com/opauth">opauth</a>
organisation. Feel free to checkout the <code>wip/1.0</code> branch of Opauth and the
strategies. Feedback or help out updating the docs for Opauth and all the
strategies will be highly appreciated.</p>

<h3>Example</h3>

<p>Here is a simple example on how to use Opauth 1.0. Create a directory with the
following composer.json file and then run <code>composer install</code></p>

<pre><code>{
    "require": {
        "opauth/opauth": "dev-wip/1.0",
        "opauth/twitter": "dev-wip/1.0"
    }
}
</code></pre>

<p>Next create <code>index.php</code></p>

<pre><code>&lt;?php
require 'vendor/autoload.php';
$config = array(
        'Strategy' =&gt; array(
                'Twitter' =&gt; array(
                        'key' =&gt; 'your_key',
                        'secret' =&gt; 'your_secret'
                ),
        ),
        'path' =&gt; '/opauth/'
);
$Opauth = new Opauth\Opauth($config);
$response = $Opauth-&gt;run();
echo "Authed as " . $response-&gt;name . " with uid" . $response-&gt;uid;
</code></pre>

<p>Fill in the key and secret in <code>index.php</code> then add this <code>.htaccess</code></p>

<pre><code>&lt;IfModule mod_rewrite.c&gt;
        RewriteEngine On
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteRule ^(.*)$ index.php [QSA,L]
&lt;/IfModule&gt;
</code></pre>

<p>Set <code>DocumentRoot</code> of your web server to this directory, or create a vhost as this
example does not work when opauth is in a subdirectory</p>

<p>Now point the browser to <a href="http://localhost/opauth/twitter">http://localhost/opauth/twitter</a> to see it in action.</p>

<h3>Example in CakePHP application</h3>

<p>Here is an example on using Opauth 1.0 in a CakePHP application. Create a fresh
application (or use an existing application), add the following composer.json
file and then run <code>composer install</code></p>

<pre><code>{
    "require": {
        "opauth/opauth": "dev-wip/1.0",
        "opauth/twitter": "dev-wip/1.0"
    },
    "config":{
        "vendor-dir":"Vendor"
    }
}
</code></pre>

<p>In your <code>app/Config/bootstrap.php</code> add the following lines</p>

<pre><code>App::import('Vendor', array('file' =&gt; 'autoload'));
Configure::write('Opauth', array(
    'Strategy' =&gt; array(
        'Twitter' =&gt; array(
            'key' =&gt; 'your_key',
            'secret' =&gt; 'your_secret'
            ),
        ),
    'path' =&gt; '/opauth/'
));
</code></pre>

<p>In your <code>app/Config/routes.php</code> add the following line</p>

<pre><code>Router::connect('/opauth/*', array('controller' =&gt; 'users', 'action' =&gt; 'opauth'));
</code></pre>

<p>In your <code>UsersController.php</code> add the following action</p>

<pre><code>public function opauth() {
    $config = Configure::read('Opauth');
    $Opauth = new Opauth\Opauth($config);
    $response = $Opauth-&gt;run();
    //use the Response object as you like
    //debug($response); to see what it looks like
}
</code></pre>

<p>Now point the browser to <a href="http://pathtoyour/application/opauth/twitter">http://pathtoyour/application/opauth/twitter</a> to see it in action.</p>

<p>Alternatively you could use an Authenticate adapter</p>

<p>create <code>app/Controller/Component/Auth/OpauthAuthenticate.php</code></p>

<pre><code>&lt;?php

class OpauthAuthenticate extends BaseAuthenticate {

    public function authenticate(CakeRequest $request, CakeResponse $response) {
        $config = Configure::read('Opauth');
        try {
            $Opauth = new Opauth\Opauth($config);
            $result = $Opauth-&gt;run();
            return $result-&gt;info;
        } catch (Exception $e) {}
        return false;
    }

}
</code></pre>

<p>and your UsersController opauth action would then look like:</p>

<pre><code>public function opauth() {
    $this-&gt;Auth-&gt;authenticate = 'Opauth';
    if ($this-&gt;Auth-&gt;login()) {
        return $this-&gt;redirect($this-&gt;Auth-&gt;loginRedirect);
    }
    $this-&gt;Session-&gt;setFlash('Social login failed');
    $this-&gt;redirect('/');
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding CakePHP as composer package]]></title>
    <link href="http://ceeram.github.com/blog/2013/06/18/adding-cakephp-as-composer-package/"/>
    <updated>2013-06-18T12:20:00+02:00</updated>
    <id>http://ceeram.github.com/blog/2013/06/18/adding-cakephp-as-composer-package</id>
    <content type="html"><![CDATA[<p>Here is a quick note on how to add CakePHP 2.x as a dependency for your cake project
using composer.
The root <code>composer.json</code> file would look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "name": "vendorname/appname",
</span><span class='line'>    "description": "Addding cake as composer package",
</span><span class='line'>    "repositories": [
</span><span class='line'>        {
</span><span class='line'>            "type": "package",
</span><span class='line'>            "package": {
</span><span class='line'>                "name": "cakephp/cakephp",
</span><span class='line'>                "version": "2.3.6",
</span><span class='line'>                "dist": {
</span><span class='line'>                    "url": "https://github.com/cakephp/cakephp/archive/2.3.6.zip",
</span><span class='line'>                    "type": "zip"
</span><span class='line'>                },
</span><span class='line'>                "source": {
</span><span class='line'>                    "url": "https://github.com/cakephp/cakephp/",
</span><span class='line'>                    "type": "git",
</span><span class='line'>                    "reference": "tree/2.3.6/"
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>    "require":{
</span><span class='line'>        "cakephp/cakephp": "~2.3"
</span><span class='line'>    },
</span><span class='line'>    "config":{
</span><span class='line'>        "vendor-dir":"Vendor"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we don&rsquo;t specify autoload or include-dirs, we let CakePHP&rsquo;s own
autoloader still handle that part.</p>

<p>Next you need to update your <code>app/webroot/index.php</code> (and <code>test.php</code>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>define('CAKE_CORE_INCLUDE_PATH', ROOT . DS . APP_DIR . DS . 'Vendor' . DS . 'cakephp' . DS . 'cakephp' . DS . 'lib');</span></code></pre></td></tr></table></div></figure>


<p>And also update your <code>app/Console/cake.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$root = dirname(dirname(__FILE__)) . $ds . 'Vendor' . $ds . 'cakephp' . $ds . 'cakephp';
</span><span class='line'>ini_set('include_path', $root . $ds . 'lib' . PATH_SEPARATOR . ini_get('include_path'));</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using composer with CakePHP 2.x]]></title>
    <link href="http://ceeram.github.com/blog/2013/02/22/using-composer-with-cakephp-2-dot-x/"/>
    <updated>2013-02-22T00:21:00+01:00</updated>
    <id>http://ceeram.github.com/blog/2013/02/22/using-composer-with-cakephp-2-dot-x</id>
    <content type="html"><![CDATA[<p>Lately i have been hacking on <a href="http://opauth.org">Opauth</a> and finally was
forced to learn more about composer.
Within the CakePHP community composer has not been adopted really,
altough <code>composer-installer</code> supports an easy way for installing <code>cakephp-plugin</code> already.
Many plugin maintainers have not added <code>composer.json</code> files to their repositories, as CakePHP itself is not using it as well.
There is no need to stop you from using composer with your CakePHP application. You can install both plugins and 3rd party libraries easily.
Currently you would clone/download required libraries to the <code>vendors/</code> or <code>app/Vendor/</code> directory.</p>

<!--more-->


<p>For libraries that support composer install, here is the way to go:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd app/
</span><span class='line'>$ curl -s https://getcomposer.org/installer | php
</span><span class='line'>$ php composer.phar require --no-update opauth/opauth:dev-wip/1.0 opauth/twitter:dev-wip/1.0
</span><span class='line'>$ php composer.phar config vendor-dir Vendor
</span><span class='line'>$ php composer.phar install</span></code></pre></td></tr></table></div></figure>


<p>Note: the following would also work, but would not add the vendor-dir to <code>composer.json</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ COMPOSER_VENDOR_DIR=Vendor php composer.phar install</span></code></pre></td></tr></table></div></figure>


<p>This will create a <code>composer.json</code> file with the required dependencies for your application.
<code>--no-update</code> is needed here to avoid installing directly to the default directory for composer, which is <code>vendor/</code>
You can also use the init command for creating the composer.json, only make sure you have configured the <code>vendor-dir</code>
before running <code>install</code> or <code>require</code></p>

<p>When running install it would produce the following output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Loading composer repositories with package information
</span><span class='line'>Installing dependencies
</span><span class='line'>  - Installing themattharris/tmhoauth (0.7.5)
</span><span class='line'>    Cloning 71e2594f5a6b720a309c627bd457926e1287c1c2
</span><span class='line'>
</span><span class='line'>  - Installing opauth/opauth (dev-wip/1.0 09547ca)
</span><span class='line'>    Cloning 09547ca9620a2f34ea5472fad4c7787d0538981e
</span><span class='line'>
</span><span class='line'>  - Installing opauth/twitter (dev-wip/1.0 a849f80)
</span><span class='line'>    Cloning a849f8048042a2b49ed5b0291363fd60d46b5258
</span><span class='line'>
</span><span class='line'>opauth/opauth suggests installing opauth/facebook (Allows Facebook authentication)
</span><span class='line'>opauth/opauth suggests installing opauth/google (Allows Google authentication)
</span><span class='line'>Writing lock file
</span><span class='line'>Generating autoload files</span></code></pre></td></tr></table></div></figure>


<p>The opauth/twitter package had its own dependency on tmhOAuth, which will automatically get installed as well.
Besides installing the libraries to the <code>app/Vendor/</code> directory it also has generated <code>app/Vendor/autoload.php</code></p>

<p>In your <code>app/Config/bootstrap.php</code> you will import the autoload file so you can instantiate all vendor classes directly</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;Vendor&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;autoload&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Opauth would be instantiated in your UsersController.php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$Opauth</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Opauth\Opauth</span><span class="p">(</span><span class="nv">$config</span><span class="p">);</span>
</span><span class='line'><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$Opauth</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install cakephp-plugin with composer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">php</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">phar</span> <span class="k">require</span> <span class="nx">ceeram</span><span class="o">/</span><span class="nx">cakepdf</span><span class="o">:</span><span class="nx">dev</span><span class="o">-</span><span class="nx">master</span>
</span><span class='line'><span class="nx">composer</span><span class="o">.</span><span class="nx">json</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">updated</span>
</span><span class='line'><span class="nx">Loading</span> <span class="nx">composer</span> <span class="nx">repositories</span> <span class="nx">with</span> <span class="nx">package</span> <span class="nx">information</span>
</span><span class='line'><span class="nx">Updating</span> <span class="nx">dependencies</span>
</span><span class='line'>  <span class="o">-</span> <span class="nx">Installing</span> <span class="nx">ceeram</span><span class="o">/</span><span class="nx">cakepdf</span> <span class="p">(</span><span class="nx">dev</span><span class="o">-</span><span class="nx">master</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">Cloning</span> <span class="mf">1.0</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Writing</span> <span class="nx">lock</span> <span class="nb">file</span>
</span><span class='line'><span class="nx">Generating</span> <span class="nx">autoload</span> <span class="nx">files</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the CakePdf plugin has been installed in app/Plugin/CakePdf</p>

<p>You can also run an interactive composer console</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">php</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">phar</span> <span class="k">require</span>
</span><span class='line'><span class="nx">Search</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">package</span> <span class="p">[]</span><span class="o">:</span> <span class="nx">shama</span><span class="o">/</span><span class="nx">ftp</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Found</span> <span class="mi">1</span> <span class="nx">packages</span> <span class="nx">matching</span> <span class="nx">shama</span><span class="o">/</span><span class="nx">ftp</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nx">shama</span><span class="o">/</span><span class="nx">ftp</span> <span class="nx">dev</span><span class="o">-</span><span class="nx">master</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Enter</span> <span class="nx">package</span> <span class="c1"># to add, or a &quot;[package] [version]&quot; couple if it is not listed []: 0</span>
</span><span class='line'><span class="nx">Search</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">package</span> <span class="p">[]</span><span class="o">:</span>
</span><span class='line'><span class="nx">composer</span><span class="o">.</span><span class="nx">json</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">updated</span>
</span><span class='line'><span class="nx">Loading</span> <span class="nx">composer</span> <span class="nx">repositories</span> <span class="nx">with</span> <span class="nx">package</span> <span class="nx">information</span>
</span><span class='line'><span class="nx">Updating</span> <span class="nx">dependencies</span>
</span><span class='line'>  <span class="o">-</span> <span class="nx">Installing</span> <span class="nx">shama</span><span class="o">/</span><span class="nx">ftp</span> <span class="p">(</span><span class="nx">dev</span><span class="o">-</span><span class="nx">master</span> <span class="nx">a84483c</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">Cloning</span> <span class="nx">a84483ccff167c63c0b69fcf55b365b87972d951</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Writing</span> <span class="nx">lock</span> <span class="nb">file</span>
</span><span class='line'><span class="nx">Generating</span> <span class="nx">autoload</span> <span class="nx">files</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check <a href="http://packagist.org">Packagist</a> for more composer packages</p>

<p>One day you can&rsquo;t imagine how you ever could live without a decent dependency manager for your PHP projects.
I&rsquo;m totally hooked on <a href="https://getcomposer.org">composer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake new_post as draft]]></title>
    <link href="http://ceeram.github.com/blog/2013/02/21/rake-new-post-as-draft/"/>
    <updated>2013-02-21T23:36:00+01:00</updated>
    <id>http://ceeram.github.com/blog/2013/02/21/rake-new-post-as-draft</id>
    <content type="html"><![CDATA[<p>The first thing after setting up Octopress was looking for ways to create new posts as draft by default.
As always Google search was very helpfull and found me this <a href="https://github.com/imathis/octopress/pull/966">pull request</a>
After applying this commit on my octopress install new posts will now be created with published: false</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceeram finally starts blogging]]></title>
    <link href="http://ceeram.github.com/blog/2013/02/21/ceeram-finally-starts-blogging/"/>
    <updated>2013-02-21T12:21:00+01:00</updated>
    <id>http://ceeram.github.com/blog/2013/02/21/ceeram-finally-starts-blogging</id>
    <content type="html"><![CDATA[<p>So i finally have set up a blog to publish things that don&rsquo;t fit in 140 characters.
Mostly i will use the blog for personal reference, but you might find things you like.</p>

<!--more-->


<p>Sorry nothing here yet, the intro itself already was -30 characters.
Just a big thank you to Octopress and Github Pages</p>
]]></content>
  </entry>
  
</feed>
